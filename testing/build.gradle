import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'biz.aQute.bnd.builder'
    id 'java-library'
}

configurations {
    bundle {
        canBeConsumed  = false
    }
}

dependencies {
    bundle project(path: ':caged-impl', configuration: 'bundle')

    testImplementation project(':caged-api')
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    testImplementation "org.slf4j:slf4j-api:$slf4jVersion"

    testCompileOnly "org.osgi:osgi.core:$osgiVersion"
    testCompileOnly "org.osgi:org.osgi.service.component.annotations:$osgiScrAnnotationVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.osgi:org.osgi.test.junit5:$osgiTestJunit5Version"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testRuntimeOnly "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion"
    testRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    testRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    testRuntimeOnly("org.apache.felix:org.apache.felix.framework.security:$felixSecurityVersion") {
        exclude group: 'org.osgi'
    }
    testRuntimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    testRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

tasks.named('jar', Jar) {
    enabled = false
}

def testResources = tasks.named('processTestResources', ProcessResources) {
    from(configurations.bundle) {
        rename 'caged-(.*)', 'caged.jar'
        into 'META-INF'
        fileMode = 0444
    }
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    dependsOn testResources
    from sourceSets.test.output
    sourceSet = sourceSets.test
    bundle {
        bnd '''\
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
'''
    }
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(
        sourceSets.test.runtimeClasspath,
        testingBundle
    )
    bndrun = file('tests.bndrun')

    doFirst {
        System.setProperty('bnd.home.dir', "$buildDir/bnd")
    }
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    resultsDirectory = file("$testResultsDir/test")
    bundles = files(
        sourceSets.test.runtimeClasspath,
        configurations.archives.artifacts.files,
        testingBundle
    )
    bndrun = resolve.flatMap { it.outputBndrun }
}

tasks.withType(Test).configureEach {
    enabled = false
}

tasks.named('check') {
    dependsOn testOSGi
}
